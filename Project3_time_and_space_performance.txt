--------------------------------------
1. Problem1_Square_root_of_an_integer
--------------------------------------

- The time complexity of my first sqrt function is O(n)
- The time complexity of mysecond sqrt function is O(log(n))

- Space complexity: O(1)



------------------------------------------
2. Problem2_Search_in_rotated_sorted_array
------------------------------------------
rotated_array_search function:

-Time Complexity: O(log n) - because it performs a binary search, and in each iteration, the search space is effectively halved.
-Space Complexity: O(1) - because the function uses a constant amount of extra space, regardless of the input size.

linear_search function:

-Time Complexity: O(n) - because it iterates through the entire input list in the worst case.
-Space Complexity: O(1) - because the function uses a constant amount of extra space, regardless of the input size.

=> rotated_array_search is more efficient than linear_search in terms of time complexity, especially for large input sizes.


------------------------------------------
3. Problem3_Rearrange_array_digits
------------------------------------------

Time Complexity:

mergesort function: 
O(n log n) - time complexity of the merge sort algorithm. Because it uses the divide-and-conquer approach. It divides the array into halves until reaching subarrays of size 1, and then it merges the sorted subarrays.

rearrange_digits function:
O(n log n) - This is because the mergesort function is called.


Space Complexity:

mergesort function: 
O(n) -  space complexity of the merge sort algorithm. 
It requires additional space for the two halves during the recursive calls, because, in each recursive call, it creates temporary arrays for the left and right halves.

rearrange_digits function: 
O(n) -  space required by the mergesort function.



------------------------------------------
4.Problem4_Dutch_National_Flag_Problem
------------------------------------------

Time Complexity: 
O(n) - sorts in a single traversal without using any sorting algorithms like mergesort or quicksort.It vosots  each element at most once.

Space Complexity:
O(1) - uses a constant amount of extra space regardless of the input size.


------------------------------------------
5.Problem5_Autocomplete_with_tries
------------------------------------------

The time complexity for finding all suffixes  is O(n), where n is the total number of characters in the Trie.
- The suffixes function traverses the Trie, exploring each node and its children recursively.
- The time complexity is linear with respect to the total number of characters in the Trie because each character in the Trie is visited once during the recursive process.


The space complexity is also O(n), where n is the total number of characters in the Trie.
- The depth of the call stack is proportional to the depth of the Trie and the length of the words stored in it.
- Since each character in the Trie corresponds to a node in the call stack during the recursive process, the space complexity is linear corresponding the total number of characters.


------------------------------------------
6.Problem6_Unsorted_Integer_Array
------------------------------------------

Time complexity:
- This algorithm has a time complexity of O(n), where n is the number of elements in the list. 
- It performs a single traversal through the list, updating the minimum and maximum elements.
- This approach is both simple and efficient for finding both the minimum and maximum elements with a linear scan and asked/required time complexity of O(n).

Space complexity:
- is O(1), which is constant. 
 - The reason for this is that the algorithm uses a fixed number of variables (min_element and max_element) to store the current minimum and maximum values. The space required does not depend on the size of the input list
 - it remains constant regardless of the number of elements in the list.


----------------------------------------------------------
7. Problem7_request_http_routing_in_web_server_with_a_trie
----------------------------------------------------------

Time Complexity:

RouteTrie.insert , RouteTrie.find, Router.lookup, Router.split_path functions have the same time complexity: 
- O(k), where k is the length of the path.


Space Complexity:

all functions have the same space complexity -  O(k), where k is the length of the path.
